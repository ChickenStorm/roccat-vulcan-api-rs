
pub mod constants {
    pub const VULCAN_100_PRODUCT_ID: u16 = 12410;
    pub const VULCAN_120_PRODUCT_ID: u16 = 12440;
    // the reason the usage page is 10 is unkown and may change device it device
    pub const USAGE_PAGE_READ_DEVICE: u16 = 10;
    pub const READ_INTERFACE_NUMBER: i32 = 1;
    pub const CONTROL_INTERFACE_NUMBER: i32 = 1;
    pub const LED_INTERFACE_NUMBER: i32 = 3;
    
    pub const FEATURE_REPORT_1: [u8; 3] = [0x15, 0x00, 0x01];
    pub const FEATURE_REPORT_2: [u8; 4] = [0x05, 0x04, 0x00, 0x04];
    pub const FEATURE_REPORT_3: [u8; 95] = [
        0x07, 0x5f, 0x00, 0x3a, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x3c, 0x00, 0x00,
        0x3d, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x40, 0x00, 0x00,
        0x41, 0x00, 0x00, 0x42, 0x00, 0x00, 0x43, 0x00, 0x00, 0x44, 0x00, 0x00,
        0x45, 0x00, 0x00, 0x46, 0x00, 0x00, 0x47, 0x00, 0x00, 0x48, 0x00, 0x00,
        0xb3, 0x00, 0x00, 0xb4, 0x00, 0x00, 0xb5, 0x00, 0x00, 0xb6, 0x00, 0x00,
        0xc2, 0x00, 0x00, 0xc3, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc1, 0x00, 0x00,
        0xce, 0x00, 0x00, 0xcf, 0x00, 0x00, 0xcc, 0x00, 0x00, 0xcd, 0x00, 0x00,
        0x46, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x48, 0x00, 0x00, 0xcd, 0x0e,
    ];
    pub const FEATURE_REPORT_4: [u8; 8] = [0x0a, 0x08, 0x00, 0xff, 0xf1, 0x00, 0x02, 0x02];
    pub const FEATURE_REPORT_5: [u8; 8] = [0x0a, 0x08, 0x00, 0xff, 0xf1, 0x00, 0x02, 0x02];
    pub const FEATURE_REPORT_6: [u8; 133] = [
        0x06, 0x85, 0x00, 0x3a, 0x29, 0x35, 0x1e, 0x2b, 0x39, 0xe1, 0xe0, 0x3b,
        0x1f, 0x14, 0x1a, 0x04, 0x64, 0x00, 0x00, 0x3d, 0x3c, 0x20, 0x21, 0x08,
        0x16, 0x1d, 0xe2, 0x3e, 0x23, 0x22, 0x15, 0x07, 0x1b, 0x06, 0x8b, 0x3f,
        0x24, 0x00, 0x17, 0x0a, 0x09, 0x19, 0x91, 0x40, 0x41, 0x00, 0x1c, 0x18,
        0x0b, 0x05, 0x2c, 0x42, 0x26, 0x25, 0x0c, 0x0d, 0x0e, 0x10, 0x11, 0x43,
        0x2a, 0x27, 0x2d, 0x12, 0x0f, 0x36, 0x8a, 0x44, 0x45, 0x89, 0x2e, 0x13,
        0x33, 0x37, 0x90, 0x46, 0x49, 0x4c, 0x2f, 0x30, 0x34, 0x38, 0x88, 0x47,
        0x4a, 0x4d, 0x31, 0x32, 0x00, 0x87, 0xe6, 0x48, 0x4b, 0x4e, 0x28, 0x52,
        0x50, 0xe5, 0xe7, 0xd2, 0x53, 0x5f, 0x5c, 0x59, 0x51, 0x00, 0xf1, 0xd1,
        0x54, 0x60, 0x5d, 0x5a, 0x4f, 0x8e, 0x65, 0xd0, 0x55, 0x61, 0x5e, 0x5b,
        0x62, 0xa4, 0xe4, 0xfc, 0x56, 0x57, 0x85, 0x58, 0x63, 0x00, 0x00, 0xc2,
        0x24,
    ];
    pub const FEATURE_REPORT_7: [u8; 43] = [
        0x09, 0x2b, 0x00, 0x49, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x4b, 0x00, 0x00,
        0x4c, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x4e, 0x00, 0x00, 0xa4, 0x00, 0x00,
        0x8e, 0x00, 0x00, 0xd0, 0x00, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0xcd, 0x04,
    ];
    // this is the rainbow one
    pub const FEATURE_REPORT_8: [u8; 443] = [
        0x0d, 0xbb, 0x01, 0x00, 0x0a, 0x04, 0x05, 0x45, 0x83, 0xca, 0xca, 0xca,
        0xca, 0xca, 0xca, 0xce, 0xce, 0xd2, 0xce, 0xce, 0xd2, 0x19, 0x19, 0x19,
        0x19, 0x19, 0x19, 0x23, 0x23, 0x2d, 0x23, 0x23,	0x2d, 0xe0, 0xe0, 0xe0,
        0xe0, 0xe0, 0xe0, 0xe3, 0xe3, 0xe6, 0xe3, 0xe3, 0xe6, 0xd2, 0xd2, 0xd5,
        0xd2, 0xd2, 0xd5, 0xd5, 0xd5, 0xd9, 0xd5, 0x00, 0xd9, 0x2d, 0x2d, 0x36,
        0x2d, 0x2d, 0x36, 0x36,	0x36, 0x40, 0x36, 0x00, 0x40, 0xe6, 0xe6, 0xe9,
        0xe6, 0xe6, 0xe9, 0xe9, 0xe9, 0xec, 0xe9, 0x00,	0xec, 0xd9, 0xd9, 0xdd,
        0xd9, 0xdd, 0xdd, 0xe0, 0xe0, 0xdd, 0xe0, 0xe4, 0xe4, 0x40, 0x40, 0x4a,
        0x40, 0x4a, 0x4a, 0x53, 0x53, 0x4a, 0x53, 0x5d, 0x5d, 0xec, 0xec, 0xef,
        0xec, 0xef, 0xef, 0xf2,	0xf2, 0xef, 0xf2, 0xf5, 0xf5, 0xe4, 0xe4, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x5d, 0x5d, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xf5, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0xe4, 0xe8,
        0xe8, 0xe8, 0xe8, 0xe8, 0xeb, 0xeb, 0xeb, 0x00, 0xeb, 0x5d, 0x5d, 0x67,
        0x67, 0x67, 0x67, 0x67, 0x70, 0x70, 0x70, 0x00, 0x70, 0xf5, 0xf5, 0xf8,
        0xf8, 0xf8, 0xf8, 0xf8, 0xfb, 0xfb, 0xfb, 0x00, 0xfb, 0xeb, 0xef, 0xef,
        0xef, 0x00, 0xef, 0xf0, 0xf0, 0xed, 0xf0, 0xf0, 0x00, 0x70, 0x7a, 0x7a,
        0x7a, 0x00, 0x7a, 0x7a, 0x7a, 0x6f, 0x7a, 0x7a, 0x00, 0xfb, 0xfd, 0xfd,
        0xfd, 0x00, 0xfd, 0xf8, 0xf8, 0xea, 0xf8, 0xf8, 0x00, 0xed, 0xed, 0xea,
        0xed, 0xed, 0x00, 0xed, 0xea, 0xea, 0xf6, 0xe7, 0xea, 0x6f, 0x6f, 0x65,
        0x6f, 0x6f, 0x00, 0x6f, 0x65, 0x65, 0x66, 0x5a, 0x65, 0xea, 0xea, 0xdc,
        0xea, 0xea, 0x00, 0xea, 0xdc, 0xdc, 0x00, 0xce, 0xdc, 0xea, 0xe7, 0xe5,
        0xe7, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x5a, 0x50,
        0x5a, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0xce, 0xc0,
        0xce, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00,
        0xe2, 0xe2, 0xe2, 0xe2,	0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0x5a, 0x00, 0x00,
        0x45, 0x45, 0x45, 0x45, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0xce, 0x00, 0x00,
        0xb2, 0xb2, 0xb2, 0xb2, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xdc, 0xdc, 0xdc,
        0xdc, 0x00, 0xda, 0xda, 0xda, 0xda, 0xda, 0x00, 0xd7, 0x30, 0x30, 0x30,
        0x30, 0x00, 0x26, 0x26, 0x26, 0x26, 0x26, 0x00, 0x1c, 0x96, 0x96, 0x96,
        0x96, 0x00, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00, 0x7a, 0xd7, 0xd7, 0xd7,
        0x00, 0xd4, 0xd4, 0xd4, 0xd4, 0xd4, 0xd1, 0xd1, 0xd1, 0x1c, 0x1c, 0x1c,
        0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x06, 0x06, 0x06, 0x7a, 0x7a, 0x7a,
        0x00, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x5e, 0x5e, 0x5e, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xcf,
    ];
    // alternative version
    pub const FEATURE_REPORT_8_ALT: [u8; 443] = [
        0x0d, 0xbb, 0x01, 0x00, 0x06, 0x0b, 0x05, 0x45, 0x83, 0xca, 0xca, 0xca,
        0xca, 0xca, 0xca, 0xce, 0xce, 0xd2, 0xce, 0xce, 0xd2, 0x19, 0x19, 0x19,
        0x19, 0x19, 0x19, 0x23, 0x23, 0x2d, 0x23, 0x23, 0x2d, 0xe0, 0xe0, 0xe0,
        0xe0, 0xe0, 0xe0, 0xe3, 0xe3, 0xe6, 0xe3, 0xe3, 0xe6, 0xd2, 0xd2, 0xd5,
        0xd2, 0xd2, 0xd5, 0xd5, 0xd5, 0xd9, 0xd5, 0x00, 0xd9, 0x2d, 0x2d, 0x36,
        0x2d, 0x2d, 0x36, 0x36, 0x36, 0x40, 0x36, 0x00, 0x40, 0xe6, 0xe6, 0xe9,
        0xe6, 0xe6, 0xe9, 0xe9, 0xe9, 0xec, 0xe9, 0x00, 0xec, 0xd9, 0xd9, 0xdd,
        0xd9, 0xdd, 0xdd, 0xe0, 0xe0, 0xdd, 0xe0, 0xe4, 0xe4, 0x40, 0x40, 0x4a,
        0x40, 0x4a, 0x4a, 0x53, 0x53, 0x4a, 0x53, 0x5d, 0x5d, 0xec, 0xec, 0xef,
        0xec, 0xef, 0xef, 0xf2, 0xf2, 0xef, 0xf2, 0xf5, 0xf5, 0xe4, 0xe4, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x5d, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xf5, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0xe4, 0xe8,
        0xe8, 0xe8, 0xe8, 0xe8, 0xeb, 0xeb, 0xeb, 0x00, 0xeb, 0x5d, 0x5d, 0x67,
        0x67, 0x67, 0x67, 0x67, 0x70, 0x70, 0x70, 0x00, 0x70, 0xf5, 0xf5, 0xf8,
        0xf8, 0xf8, 0xf8, 0xf8, 0xfb, 0xfb, 0xfb, 0x00, 0xfb, 0xeb, 0xef, 0xef,
        0xef, 0x00, 0xef, 0xf0, 0xf0, 0xed, 0xf0, 0xf0, 0x00, 0x70, 0x7a, 0x7a,
        0x7a, 0x00, 0x7a, 0x7a, 0x7a, 0x6f, 0x7a, 0x7a, 0x00, 0xfb, 0xfd, 0xfd,
        0xfd, 0x00, 0xfd, 0xf8, 0xf8, 0xea, 0xf8, 0xf8, 0x00, 0xed, 0xed, 0xea,
        0xed, 0xed, 0x00, 0xed, 0xea, 0xea, 0xf6, 0xe7, 0xea, 0x6f, 0x6f, 0x65,
        0x6f, 0x6f, 0x00, 0x6f, 0x65, 0x65, 0x66, 0x5a, 0x65, 0xea, 0xea, 0xdc,
        0xea, 0xea, 0x00, 0xea, 0xdc, 0xdc, 0x00, 0xce, 0xdc, 0xea, 0xe7, 0xe5,
        0xe7, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x5a, 0x50,
        0x5a, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0xce, 0xc0,
        0xce, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00,
        0xe2, 0xe2, 0xe2, 0xe2, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0x5a, 0x00, 0x00,
        0x45, 0x45, 0x45, 0x45, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0xce, 0x00, 0x00,
        0xb2, 0xb2, 0xb2, 0xb2, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xdc, 0xdc, 0xdc,
        0xdc, 0x00, 0xda, 0xda, 0xda, 0xda, 0xda, 0x00, 0xd7, 0x30, 0x30, 0x30,
        0x30, 0x00, 0x26, 0x26, 0x26, 0x26, 0x26, 0x00, 0x1c, 0x96, 0x96, 0x96,
        0x96, 0x00, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00, 0x7a, 0xd7, 0xd7, 0xd7,
        0x00, 0xd4, 0xd4, 0xd4, 0xd4, 0xd4, 0xd1, 0xd1, 0xd1, 0x1c, 0x1c, 0x1c,
        0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x06, 0x06, 0x06, 0x7a, 0x7a, 0x7a,
        0x00, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x5e, 0x5e, 0x5e, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xcf,
    ];
    pub const FEATURE_REPORT_9: [u8; 8] = [0x13, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    pub const FEATURE_REPORT: [&[u8] ; 9] = [
        &FEATURE_REPORT_1,
        &FEATURE_REPORT_2,
        &FEATURE_REPORT_3,
        &FEATURE_REPORT_4,
        &FEATURE_REPORT_5,
        &FEATURE_REPORT_6,
        &FEATURE_REPORT_7,
        &FEATURE_REPORT_8,
        &FEATURE_REPORT_9,
    ];
    pub const FEATURE_REPORT_ALT: [&[u8] ; 9] = [
        &FEATURE_REPORT_1,
        &FEATURE_REPORT_2,
        &FEATURE_REPORT_3,
        &FEATURE_REPORT_4,
        &FEATURE_REPORT_5,
        &FEATURE_REPORT_6,
        &FEATURE_REPORT_7,
        &FEATURE_REPORT_8_ALT,
        &FEATURE_REPORT_9,
    ];
}

#[derive(Clone)]
pub struct HidInterfaceInfo {
    product_id : u16,
    interface_number : i32,
}

impl HidInterfaceInfo {
    pub fn new(product_id: u16, interface_number: i32) -> Self {
        Self {
            product_id,
            interface_number,
        }
    }
    
    pub fn product_id(&self) -> u16 {
        return self.product_id
    }
    
    pub fn interface_number(&self) -> i32 {
        return self.interface_number
    }
    
}

#[derive(Clone)]
pub struct HidInterfaceUserPageInfo {
    product_id : u16,
    interface_number : i32,
    usage_page : u16,
}

#[derive(Clone)]
pub enum HidInterfaceFilter {
    Basic(HidInterfaceInfo),
    UsagePage(HidInterfaceUserPageInfo),
}

impl HidInterfaceUserPageInfo {
    pub fn new(product_id: u16, interface_number: i32, usage_page: u16) -> Self {
        Self {
            product_id,
            interface_number,
            usage_page,
        }    
    }
    
    pub fn product_id(&self) -> u16 {
        return self.product_id
    }
    
    pub fn interface_number(&self) -> i32 {
        return self.interface_number
    }
    
    pub fn usage_page(&self) -> u16 {
        return self.usage_page
    }
}

#[derive(Clone)]
pub struct KeyboardIntrefacesInfo {
    read_interface : HidInterfaceFilter,
    control_interface : HidInterfaceFilter,
    led_interface : HidInterfaceFilter,
}

impl KeyboardIntrefacesInfo {
    pub fn get_vulcan_100() -> Self {
        let product_id = constants::VULCAN_100_PRODUCT_ID;
        Self {
            read_interface : HidInterfaceFilter::UsagePage(HidInterfaceUserPageInfo::new(
                product_id,
                constants::READ_INTERFACE_NUMBER,
                constants::USAGE_PAGE_READ_DEVICE,
            )),
            control_interface : HidInterfaceFilter::Basic(HidInterfaceInfo::new(
                product_id,
                constants::CONTROL_INTERFACE_NUMBER,
            )),
            led_interface : HidInterfaceFilter::Basic(HidInterfaceInfo::new(
                product_id,
                constants::LED_INTERFACE_NUMBER,
            )),
        }
    }
    
    pub fn get_vulcan_120() -> Self {
        let product_id = constants::VULCAN_120_PRODUCT_ID;
        Self {
            read_interface : HidInterfaceFilter::UsagePage(HidInterfaceUserPageInfo::new(
                product_id,
                constants::READ_INTERFACE_NUMBER,
                constants::USAGE_PAGE_READ_DEVICE,
            )),
            control_interface : HidInterfaceFilter::Basic(HidInterfaceInfo::new(
                product_id,
                constants::CONTROL_INTERFACE_NUMBER,
            )),
            led_interface : HidInterfaceFilter::Basic(HidInterfaceInfo::new(
                product_id,
                constants::LED_INTERFACE_NUMBER,
            )),
        }
    }
    
    
    pub fn product_id(&self) -> u16 {
        match &self.led_interface {
            HidInterfaceFilter::Basic(interface) => interface.product_id(),
            HidInterfaceFilter::UsagePage(interface) => interface.product_id(),
        }
    }
    
    pub fn read_interface(&self) -> &HidInterfaceFilter {
        return &self.read_interface
    }
    
    pub fn control_interface(&self) -> &HidInterfaceFilter {
        return &self.control_interface
    }
    
    pub fn led_interface(&self) -> &HidInterfaceFilter {
        return &self.led_interface
    }
}

pub fn get_default_interface_info() -> [KeyboardIntrefacesInfo; 2] {
    return [KeyboardIntrefacesInfo::get_vulcan_100(), KeyboardIntrefacesInfo::get_vulcan_120()];
}

pub const fn get_products_id_default() -> [u16; 2] {
    [constants::VULCAN_100_PRODUCT_ID, constants::VULCAN_120_PRODUCT_ID]
}
